{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { SET_AUTHENTICATION, SET_USERNAME } from \"../store/storeconstants\";\nexport default {\n  name: \"LoginView\",\n  data() {\n    return {\n      input: {\n        username: \"\",\n        password: \"\"\n      },\n      output: \"\"\n    };\n  },\n  methods: {\n    async login() {\n      if (!this.input.username || !this.input.password) {\n        this.output = \"Username and password cannot be empty\";\n        return;\n      }\n      try {\n        let data = JSON.stringify({\n          username: \"bruno.castro\",\n          password: \"pass12345\"\n        });\n        let config = {\n          method: \"post\",\n          maxBodyLength: Infinity,\n          url: \"https://staging.casinogate.pt/backoffice/login\",\n          headers: {\n            Authorization: \"Basic Q0FTSU5PR0FURTo2dCUkcSQ5cTRleng3JmcocHNvM3BxeiYkemFqMXEkdjZsPQ==\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\"\n          },\n          data: data\n        };\n        this.$axios.request(config).then(response => {\n          console.log(JSON.stringify(response.data));\n        }).catch(error => {\n          console.log(error);\n        });\n        this.$store.commit(`./auth/${SET_AUTHENTICATION}`, true);\n        this.$store.commit(`./auth/${SET_USERNAME}`, this.input.username);\n        this.$router.push(\"/dashboard\");\n      } catch (error) {\n        console.error(error);\n        this.output = \"An error occurred during login\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["SET_AUTHENTICATION","SET_USERNAME","name","data","input","username","password","output","methods","login","JSON","stringify","config","method","maxBodyLength","Infinity","url","headers","Authorization","$axios","request","then","response","console","log","catch","error","$store","commit","$router","push"],"sources":["/Users/brunocastro/CUSTOM/CLIENTES/casinoGate/casinogate_backoffice_working/src/components/LoginView.vue"],"sourcesContent":["<template>\n  <div class=\"login-bg\">\n    <div class=\"form\">\n      <form name=\"login-form\" @submit.prevent=\"login\">\n        <div class=\"mb-3\">\n          <label for=\"username\">Username: </label>\n          <input type=\"text\" id=\"username\" v-model=\"input.username\" />\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"password\">Password: </label>\n          <input type=\"password\" id=\"password\" v-model=\"input.password\" />\n        </div>\n        <button class=\"btn btn-outline-dark\" type=\"submit\">Login</button>\n        <p v-if=\"output\" class=\"error\">{{ output }}</p>\n      </form>\n    </div>\n    <div class=\"login-title\">\n      {{ $t(\"login.title\") }}\n    </div>\n    <div class=\"login-description\">\n      {{ $t(\"login.description\") }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { SET_AUTHENTICATION, SET_USERNAME } from \"../store/storeconstants\";\n\nexport default {\n  name: \"LoginView\",\n  data() {\n    return {\n      input: {\n        username: \"\",\n        password: \"\",\n      },\n      output: \"\",\n    };\n  },\n  methods: {\n    async login() {\n      if (!this.input.username || !this.input.password) {\n        this.output = \"Username and password cannot be empty\";\n        return;\n      }\n\n      try {\n        let data = JSON.stringify({\n          username: \"bruno.castro\",\n          password: \"pass12345\",\n        });\n\n        let config = {\n          method: \"post\",\n          maxBodyLength: Infinity,\n          url: \"https://staging.casinogate.pt/backoffice/login\",\n          headers: {\n            Authorization:\n              \"Basic Q0FTSU5PR0FURTo2dCUkcSQ5cTRleng3JmcocHNvM3BxeiYkemFqMXEkdjZsPQ==\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\",\n          },\n          data: data,\n        };\n\n        this.$axios\n          .request(config)\n          .then((response) => {\n            console.log(JSON.stringify(response.data));\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n\n        this.$store.commit(`./auth/${SET_AUTHENTICATION}`, true);\n        this.$store.commit(`./auth/${SET_USERNAME}`, this.input.username);\n        this.$router.push(\"/dashboard\");\n      } catch (error) {\n        console.error(error);\n        this.output = \"An error occurred during login\";\n      }\n    },\n  },\n};\n</script>\n\n<style>\n.error {\n  color: red;\n}\n</style>\n"],"mappings":";AA0BA,SAASA,kBAAkB,EAAEC,YAAW,QAAS,yBAAyB;AAE1E,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;QACLC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE;MACZ,CAAC;MACDC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI,CAAC,IAAI,CAACL,KAAK,CAACC,QAAO,IAAK,CAAC,IAAI,CAACD,KAAK,CAACE,QAAQ,EAAE;QAChD,IAAI,CAACC,MAAK,GAAI,uCAAuC;QACrD;MACF;MAEA,IAAI;QACF,IAAIJ,IAAG,GAAIO,IAAI,CAACC,SAAS,CAAC;UACxBN,QAAQ,EAAE,cAAc;UACxBC,QAAQ,EAAE;QACZ,CAAC,CAAC;QAEF,IAAIM,MAAK,GAAI;UACXC,MAAM,EAAE,MAAM;UACdC,aAAa,EAAEC,QAAQ;UACvBC,GAAG,EAAE,gDAAgD;UACrDC,OAAO,EAAE;YACPC,aAAa,EACX,wEAAwE;YAC1E,6BAA6B,EAAE,GAAG;YAClC,cAAc,EAAE;UAClB,CAAC;UACDf,IAAI,EAAEA;QACR,CAAC;QAED,IAAI,CAACgB,MAAK,CACPC,OAAO,CAACR,MAAM,EACdS,IAAI,CAAEC,QAAQ,IAAK;UAClBC,OAAO,CAACC,GAAG,CAACd,IAAI,CAACC,SAAS,CAACW,QAAQ,CAACnB,IAAI,CAAC,CAAC;QAC5C,CAAC,EACAsB,KAAK,CAAEC,KAAK,IAAK;UAChBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;QACpB,CAAC,CAAC;QAEJ,IAAI,CAACC,MAAM,CAACC,MAAM,CAAE,UAAS5B,kBAAmB,EAAC,EAAE,IAAI,CAAC;QACxD,IAAI,CAAC2B,MAAM,CAACC,MAAM,CAAE,UAAS3B,YAAa,EAAC,EAAE,IAAI,CAACG,KAAK,CAACC,QAAQ,CAAC;QACjE,IAAI,CAACwB,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;MACjC,EAAE,OAAOJ,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;QACpB,IAAI,CAACnB,MAAK,GAAI,gCAAgC;MAChD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}