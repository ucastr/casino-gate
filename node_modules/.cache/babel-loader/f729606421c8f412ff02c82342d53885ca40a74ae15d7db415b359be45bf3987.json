{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { SET_AUTHENTICATION, SET_USERNAME, SET_TOKEN, GET_TOKEN } from \"../store/storeconstants\";\nexport default {\n  name: \"LoginView\",\n  data() {\n    return {\n      autocompleteValue: \"off\",\n      input: {\n        username: \"\",\n        password: \"\"\n      },\n      output: \"\",\n      rememberMe: false,\n      showPassword: false\n    };\n  },\n  methods: {\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    },\n    checkRememberMe() {\n      const userData = localStorage.getItem(\"userData\");\n      if (userData) {\n        const {\n          username,\n          password,\n          rememberMe\n        } = JSON.parse(userData);\n        if (rememberMe) {\n          this.input.username = username;\n          this.input.password = password;\n          this.input.rememberMe = rememberMe;\n        }\n      }\n    },\n    async login() {\n      if (!this.input.username || !this.input.password) {\n        this.output = \"Username and password cannot be empty\";\n        return;\n      }\n      try {\n        let data = JSON.stringify({\n          username: this.input.username,\n          password: this.input.password\n        });\n        let config = {\n          method: \"post\",\n          maxBodyLength: Infinity,\n          url: \"https://staging.casinogate.pt/backoffice/login\",\n          headers: {\n            Authorization: \"Basic Q0FTSU5PR0FURTo2dCUkcSQ5cTRleng3JmcocHNvM3BxeiYkemFqMXEkdjZsPQ==\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\"\n          },\n          data: data\n        };\n        this.$axios.request(config).then(response => {\n          console.log(JSON.stringify(response.data));\n          console.log(response.data.casinoId[0]);\n          //validar se o username será o casino id ou o user para entrar na app\n          this.$store.commit(`auth/${SET_AUTHENTICATION}`, true);\n          this.$store.commit(`auth/${SET_USERNAME}`, this.input.username);\n          this.$store.commit(`auth/${SET_TOKEN}`, response.data.token);\n          console.log(\"value of SET_AUTHENTICATION == \", SET_AUTHENTICATION);\n          console.log(\"value of SET_USERNAME == \", SET_USERNAME);\n          console.log(\"value of set token == \", SET_TOKEN);\n          const token = this.$store.getters[`auth/${GET_TOKEN}`];\n          console.log(\"Valor atual do token:\", token);\n          //GET THE ARRAY MENUS LIST\n\n          let data = JSON.stringify({\n            token: response.data.token\n          });\n          let config = {\n            method: \"post\",\n            maxBodyLength: Infinity,\n            url: \"https://staging.casinogate.pt/backoffice/get_permissions\",\n            headers: {\n              Authorization: \"Basic Q0FTSU5PR0FURTo2dCUkcSQ5cTRleng3JmcocHNvM3BxeiYkemFqMXEkdjZsPQ==\",\n              \"Access-Control-Allow-Origin\": \"*\",\n              \"Content-Type\": \"application/json\"\n            },\n            data: data\n          };\n          this.$axios.request(config).then(response => {\n            console.log(JSON.stringify(response.data));\n            const permissions = response.data.permissions;\n            // Seu componente de login\n            this.$store.commit(\"permissions/SET_PERMISSIONS\", permissions);\n            console.log(permissions);\n            this.$router.push(\"/dashboard\");\n          }).catch(error => {\n            console.log(error);\n          });\n        }).catch(error => {\n          console.log(error);\n        });\n      } catch (error) {\n        console.error(error);\n        this.output = \"An error occurred during login\";\n      }\n    }\n  },\n  mounted() {\n    this.checkRememberMe();\n  }\n};","map":{"version":3,"names":["SET_AUTHENTICATION","SET_USERNAME","SET_TOKEN","GET_TOKEN","name","data","autocompleteValue","input","username","password","output","rememberMe","showPassword","methods","togglePasswordVisibility","checkRememberMe","userData","localStorage","getItem","JSON","parse","login","stringify","config","method","maxBodyLength","Infinity","url","headers","Authorization","$axios","request","then","response","console","log","casinoId","$store","commit","token","getters","permissions","$router","push","catch","error","mounted"],"sources":["/Users/brunocastro/CUSTOM/CLIENTES/casinoGate/casinogate_backoffice/src/components/LoginView.vue"],"sourcesContent":["<template>\n  <div class=\"login-bg\">\n    <div class=\"login-title text-start\">\n      <h1>{{ $t(\"login.title\") }}</h1>\n    </div>\n    <div class=\"login-description\">\n      <h2>{{ $t(\"login.description\") }}</h2>\n    </div>\n\n    <main class=\"form-signin m-auto\">\n      <form name=\"login-form\" @submit.prevent=\"login\">\n        <h1 class=\"h3 mb-3 fw-normal\">Casinogate | Backoffice</h1>\n        <h2 class=\"h5 mb-5 fw-normal\">SIGN IN</h2>\n\n        <div class=\"form text-start mb-4\">\n          <label for=\"floatingInput\" class=\"loginLabel\">Username</label>\n          <input\n            type=\"text\"\n            class=\"form-control login\"\n            id=\"username\"\n            :autocomplete=\"autocompleteValue\"\n            :placeholder=\"$t('login.usernamePlaceholder')\"\n            v-model=\"input.username\"\n          />\n        </div>\n        <div class=\"form text-start mb-2\">\n          <label for=\"floatingPassword\" class=\"loginLabel\">Password</label>\n          <input\n            type=\"password\"\n            class=\"form-control login\"\n            id=\"password\"\n            :autocomplete=\"autocompleteValue\"\n            :placeholder=\"$t('login.passwordPlaceholder')\"\n            v-model=\"input.password\"\n          />\n          <button @click=\"togglePasswordVisibility\">\n            <img src=\"eye-icon.png\" v-if=\"showPassword === false\" />\n            <img\n              src=\"eye-off-icon.png\"\n              alt=\"Toggle password visibility\"\n              v-else\n            />\n          </button>\n        </div>\n\n        <div class=\"form-check text-start mb-4\">\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            value=\"remember-me\"\n            id=\"flexCheckDefault\"\n            v-model=\"input.rememberMe\"\n          />\n          <label class=\"form-check-label loginLabel\" for=\"flexCheckDefault\">\n            {{ $t(\"login.rememberMe\") }}\n          </label>\n        </div>\n        <button class=\"btn btn-primary w-100 py-2\" type=\"submit\">\n          {{ $t(\"login.buttonSignIn\") }}\n        </button>\n      </form>\n    </main>\n  </div>\n</template>\n\n<script>\nimport {\n  SET_AUTHENTICATION,\n  SET_USERNAME,\n  SET_TOKEN,\n  GET_TOKEN,\n} from \"../store/storeconstants\";\n\nexport default {\n  name: \"LoginView\",\n  data() {\n    return {\n      autocompleteValue: \"off\",\n      input: {\n        username: \"\",\n        password: \"\",\n      },\n      output: \"\",\n      rememberMe: false,\n      showPassword: false,\n    };\n  },\n  methods: {\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    },\n    checkRememberMe() {\n      const userData = localStorage.getItem(\"userData\");\n      if (userData) {\n        const { username, password, rememberMe } = JSON.parse(userData);\n        if (rememberMe) {\n          this.input.username = username;\n          this.input.password = password;\n          this.input.rememberMe = rememberMe;\n        }\n      }\n    },\n    async login() {\n      if (!this.input.username || !this.input.password) {\n        this.output = \"Username and password cannot be empty\";\n        return;\n      }\n\n      try {\n        let data = JSON.stringify({\n          username: this.input.username,\n          password: this.input.password,\n        });\n\n        let config = {\n          method: \"post\",\n          maxBodyLength: Infinity,\n          url: \"https://staging.casinogate.pt/backoffice/login\",\n          headers: {\n            Authorization:\n              \"Basic Q0FTSU5PR0FURTo2dCUkcSQ5cTRleng3JmcocHNvM3BxeiYkemFqMXEkdjZsPQ==\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\",\n          },\n          data: data,\n        };\n\n        this.$axios\n          .request(config)\n          .then((response) => {\n            console.log(JSON.stringify(response.data));\n            console.log(response.data.casinoId[0]);\n            //validar se o username será o casino id ou o user para entrar na app\n            this.$store.commit(`auth/${SET_AUTHENTICATION}`, true);\n            this.$store.commit(`auth/${SET_USERNAME}`, this.input.username);\n            this.$store.commit(`auth/${SET_TOKEN}`, response.data.token);\n\n            console.log(\"value of SET_AUTHENTICATION == \", SET_AUTHENTICATION);\n            console.log(\"value of SET_USERNAME == \", SET_USERNAME);\n            console.log(\"value of set token == \", SET_TOKEN);\n\n            const token = this.$store.getters[`auth/${GET_TOKEN}`];\n            console.log(\"Valor atual do token:\", token);\n            //GET THE ARRAY MENUS LIST\n\n            let data = JSON.stringify({\n              token: response.data.token,\n            });\n\n            let config = {\n              method: \"post\",\n              maxBodyLength: Infinity,\n              url: \"https://staging.casinogate.pt/backoffice/get_permissions\",\n              headers: {\n                Authorization:\n                  \"Basic Q0FTSU5PR0FURTo2dCUkcSQ5cTRleng3JmcocHNvM3BxeiYkemFqMXEkdjZsPQ==\",\n                \"Access-Control-Allow-Origin\": \"*\",\n                \"Content-Type\": \"application/json\",\n              },\n              data: data,\n            };\n\n            this.$axios\n              .request(config)\n              .then((response) => {\n                console.log(JSON.stringify(response.data));\n                const permissions = response.data.permissions;\n                // Seu componente de login\n                this.$store.commit(\"permissions/SET_PERMISSIONS\", permissions);\n\n                console.log(permissions);\n                this.$router.push(\"/dashboard\");\n              })\n              .catch((error) => {\n                console.log(error);\n              });\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      } catch (error) {\n        console.error(error);\n        this.output = \"An error occurred during login\";\n      }\n    },\n  },\n  mounted() {\n    this.checkRememberMe();\n  },\n};\n</script>\n\n<style>\n.error {\n  color: red;\n}\nbutton {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}